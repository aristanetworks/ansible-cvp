---
- name: Playbook to validate and demonstrate cv_container module.
  hosts: cvp
  connection: local
  gather_facts: no
  collections:
    - arista.cvp
  vars:
    verbose: False
    containers_cleanup:
      staging:
          parent_container: Tenant
          devices:
            - veos01
            - veos02
            - veos03

    containers_provision:
        Fabric:
          parent_container: Tenant
        Spines:
          parent_container: Fabric
        Leaves:
          parent_container: Fabric
          configlets:
              - alias
          devices:
            - veos03
        MLAG01:
          parent_container: Leaves
          devices:
            - veos01
            - veos02
        ROOM02:
          parent_container: Tenant
        ROOM02_Spines:
          parent_container: ROOM02
        ROOM02_Leaves:
          parent_container: ROOM02

    container_delete:
      ROOM02:
        parent_container: Tenant
      ROOM02_Spines:
        parent_container: ROOM02
      ROOM02_Leaves:
        parent_container: ROOM02

  tasks:
    - name: "Gather CVP facts from {{inventory_hostname}}"
      cv_facts:
      register: cvp_facts
      tags:
        - always

    - name: "RUN01 - Build Container topology on {{inventory_hostname}}"
      tags:
        - provision
        - never
      cv_container:
        topology: '{{containers_provision}}'
        cvp_facts: '{{cvp_facts.ansible_facts}}'
        save_topology: true
        mode: 'merge'
      register: cv_container

    - name: "RUN01 - Display cv_container outputs"
      tags:
        - provision
        - never
      debug:
        msg: "{{cv_container}}"

    - name: "RUN01 - Check if Leaves container exists"
      tags:
        - provision
        - never
      cv_facts:
      register: cvp_facts

    - name: "RUN01 - Check if Leaves container exists"
      tags:
        - provision
      assert:
        that:
          - "cvp_facts.ansible_facts['containers'] | selectattr(search_key,'equalto',search_val) | list | count > 0"
        fail_msg: "Leaves container has not been found in facts"
        success_msg: "Leaves container has been found as expected"
      vars:
        search_key: name
        search_val: Leaves

    - name: "RUN02 - Delete Container topology on {{inventory_hostname}}"
      tags:
        - delete
      cv_container:
        topology: '{{container_delete}}'
        cvp_facts: '{{cvp_facts.ansible_facts}}'
        mode: 'delete'
        save_topology: true
      register: cv_container

    - name: "RUN02 - Check if ROOM02 container exists"
      tags:
        - delete
        - never
      cv_facts:
      register: cvp_facts_delete

    - name: "RUN02 - Check if ROOM02 container exists"
      tags:
        - delete
        - never
      assert:
        that:
          - "cvp_facts_delete.ansible_facts['containers'] | selectattr(search_key,'equalto',search_val) | list | count < 0"
        success_msg: "ROOM02 container has not been found in facts as expected"
        fail_msg: "ROOM02 container has been found in facts"
      vars:
        search_key: name
        search_val: ROOM02

    - name: "RUN03 - Cleanup Container topology on {{inventory_hostname}}"
      tags:
          - never
          - cleanup
      cv_container:
        topology: '{{containers_cleanup}}'
        cvp_facts: '{{cvp_facts.ansible_facts}}'
        mode: 'override'
      register: cv_container

    - name: "RUN03 - Display cv_container outputs"
      tags:
        - cleanup
      debug:
        msg: "{{cv_container}}"

    - name: "RUN03 - Gather CVP facts from {{inventory_hostname}}"
      cv_facts:
      register: cvp_facts
      tags:
        - never
        - cleanup

    - name: "RUN03 - Check if Leaves container has been removed"
      tags:
          - never
          - cleanup
      assert:
        that:
          - "cvp_facts.ansible_facts['containers'] | selectattr(search_key,'equalto',search_val) | list | count == 0"
        fail_msg: "Leaves container has been found in facts"
        success_msg: "Leaves container has not been found as expected"
      vars:
        search_key: name
        search_val: Leaves