---
- name: Playbook to validate and demonstrate cv_container module.
  hosts: cvp
  connection: local
  gather_facts: no
  vars:
    verbose: False
    containers_cleanup:
    containers_build:
      - name: Fabric
        parent_container: Tenant
      - name: Spines
        parent_container: Fabric
      - name: Leaves
        parent_container: Fabric
  tasks:
    - name: "Gather CVP facts from {{inventory_hostname}}"
      cv_facts:
        host: '{{ansible_host}}'
        username: '{{cvp_username}}'
        password: '{{cvp_password}}'
        protocol: https
        port: '{{cvp_port}}'
      register: cvp_facts
      tags:
        - always

    - name: "Build Container topology on {{inventory_hostname}}"
      tags:
        - build
      cv_container:
        host: '{{ansible_host}}'
        username: '{{cvp_username}}'
        password: '{{cvp_password}}'
        port: '{{cvp_port}}'
        protocol: https
        topology: '{{containers_build}}'
        cvp_facts: '{{cvp_facts.ansible_facts}}'

    - name: "Check if Leaves container exists"
      tags:
        - build
        - never
      cv_facts:
        host: '{{ansible_host}}'
        username: '{{cvp_username}}'
        password: '{{cvp_password}}'
        protocol: https
        port: '{{cvp_port}}'
      register: cvp_facts

    - name: "Check if Leaves container exists"
      tags:
        - build
        - check
      assert:
        that:
          - "cvp_facts.ansible_facts['containers'] | selectattr(search_key,'equalto',search_val) | list | count > 0"
        fail_msg: "Leaves container has not been found in facts"
        success_msg: "Leaves container has been found as expected"
      vars:
        search_key: name
        search_val: Leaves

    - name: "Cleanup Container topology on {{inventory_hostname}}"
      tags:
          - never
          - cleanup
      cv_container:
        host: '{{ansible_host}}'
        username: '{{cvp_username}}'
        password: '{{cvp_password}}'
        port: '{{cvp_port}}'
        protocol: https
        topology: '{{containers_cleanup}}'
        cvp_facts: '{{cvp_facts.ansible_facts}}'

    - name: "Gather CVP facts from {{inventory_hostname}}"
      cv_facts:
        host: '{{ansible_host}}'
        username: '{{cvp_username}}'
        password: '{{cvp_password}}'
        protocol: https
        port: '{{cvp_port}}'
      register: cvp_facts
      tags:
        - never
        - cleanup

    - name: "Check if Leaves container has been removed"
      tags:
          - never
          - cleanup
      assert:
        that:
          - "cvp_facts.ansible_facts['containers'] | selectattr(search_key,'equalto',search_val) | list | count == 0"
        fail_msg: "Leaves container has been found in facts"
        success_msg: "Leaves container has not been found as expected"
      vars:
        search_key: name
        search_val: Leaves