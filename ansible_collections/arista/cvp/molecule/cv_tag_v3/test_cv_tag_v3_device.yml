---
- name: Test cv_tag_v3 for device tags
  hosts: CloudVision
  connection: local
  gather_facts: no
  vars:
    ASSIGN_DELETE_TAGS_AUTO_CREATE:
      - device: leaf1.atd.lab
        device_tags:
          - name: leaf1DAutoAssign
            value: leaf1DAutoAssign
      - device: leaf2.atd.lab
        device_tags:
          - name: leaf2DAutoAssign
            value: leaf2DAutoAssign

    CREATE_TAGS:
      - device_tags:
          - name: leaf1DCreate_New
            value: leaf1DCreate_New
          - name: leaf2DCreate_New
            value: leaf2DCreate_New

    ASSIGN_UNASSIGN_DELETE_EXISTING_TAGS:
      - device: leaf1.atd.lab
        device_tags:
          - name: leaf1DCreate_New
            value: leaf1DCreate_New
      - device: leaf2.atd.lab
        device_tags:
          - name: leaf2DCreate_New
            value: leaf2DCreate_New

    ASSIGN_DELETE_NON_EXISTING_TAGS:
      - device: leaf1.atd.lab
        device_tags:
          - name: leaf1DNonExistingTag
            value: leaf1DNonExistingTag

  tasks:
    - name: Assign non-existing device tags
      arista.cvp.cv_tag_v3:
        tags: "{{ASSIGN_DELETE_TAGS_AUTO_CREATE}}"
        mode: assign
        auto_create: true
      register: AUTO_CREATE_ASSIGN_TAGS

    - name: Check assign non-existing device tags
      assert:
        that:
          - AUTO_CREATE_ASSIGN_TAGS.changed == true
          - AUTO_CREATE_ASSIGN_TAGS.failed == false
          - AUTO_CREATE_ASSIGN_TAGS.success == true
          - AUTO_CREATE_ASSIGN_TAGS.tags_manager.tags_manager_list != []
          - AUTO_CREATE_ASSIGN_TAGS.tags_manager.tags_manager_count == 1

    - name: Unassign auto-create device tags
      arista.cvp.cv_tag_v3:
        tags: "{{ASSIGN_DELETE_TAGS_AUTO_CREATE}}"
        mode: unassign
      register: AUTO_CREATE_UNASSIGN_TAGS

    - name: Check unassign auto-create device tags
      assert:
        that:
          - AUTO_CREATE_UNASSIGN_TAGS.changed == true
          - AUTO_CREATE_UNASSIGN_TAGS.failed == false
          - AUTO_CREATE_UNASSIGN_TAGS.success == true
          - AUTO_CREATE_UNASSIGN_TAGS.tags_manager.tags_manager_list != []
          - AUTO_CREATE_UNASSIGN_TAGS.tags_manager.tags_manager_count == 1

    - name: Delete auto_create device tags
      arista.cvp.cv_tag_v3:
        tags: "{{ASSIGN_DELETE_TAGS_AUTO_CREATE}}"
        mode: delete
      register: AUTO_CREATE_TAGS_DELETE

    - name: Check delete auto_create device tags
      assert:
        that:
          - AUTO_CREATE_TAGS_DELETE.changed == true
          - AUTO_CREATE_TAGS_DELETE.failed == false
          - AUTO_CREATE_TAGS_DELETE.success == true
          - AUTO_CREATE_TAGS_DELETE.tags_manager.tags_manager_list != []
          - AUTO_CREATE_TAGS_DELETE.tags_manager.tags_manager_count == 1

# Create -> assign -> unassign -> delete

    - name: Create device tags (part of CREATE -> assign -> unassign -> delete)
      arista.cvp.cv_tag_v3:
        tags: "{{CREATE_TAGS}}"
        mode: create
      register: TAGS_CREATE

    - name: Check create device tags
      assert:
        that:
          - TAGS_CREATE.changed == true
          - TAGS_CREATE.failed == false
          - TAGS_CREATE.success == true
          - TAGS_CREATE.tags_manager.tags_manager_list != []
          - TAGS_CREATE.tags_manager.tags_manager_count == 1

    - name: Assign existing device tags (part of create -> ASSIGN -> unassign -> delete)
      arista.cvp.cv_tag_v3:
        tags: "{{ASSIGN_UNASSIGN_DELETE_EXISTING_TAGS}}"
        mode: assign
      register: ASSIGN_EXISTING

    - name: Check assign existing device tags
      assert:
        that:
          - ASSIGN_EXISTING.changed == true
          - ASSIGN_EXISTING.failed == false
          - ASSIGN_EXISTING.success == true
          - ASSIGN_EXISTING.tags_manager.tags_manager_list != []
          - ASSIGN_EXISTING.tags_manager.tags_manager_count == 1

    - name: Unassign existing device tags (part of create -> assign -> UNASSIGN -> delete)
      arista.cvp.cv_tag_v3:
        tags: "{{ASSIGN_UNASSIGN_DELETE_EXISTING_TAGS}}"
        mode: unassign
      register: UNASSIGN_EXISTING

    - name: Check unassign existing device tags
      assert:
        that:
          - UNASSIGN_EXISTING.changed == true
          - UNASSIGN_EXISTING.failed == false
          - UNASSIGN_EXISTING.success == true
          - UNASSIGN_EXISTING.tags_manager.tags_manager_list != []
          - UNASSIGN_EXISTING.tags_manager.tags_manager_count == 1

    - name: Delete device tags (part of create -> assign -> unassign -> DELETE)
      arista.cvp.cv_tag_v3:
        tags: "{{ASSIGN_UNASSIGN_DELETE_EXISTING_TAGS}}"
        mode: delete
      register: TAGS_DELETE

    - name: Check delete device tags
      assert:
        that:
          - TAGS_DELETE.changed == true
          - TAGS_DELETE.failed == false
          - TAGS_DELETE.success == true
          - TAGS_DELETE.tags_manager.tags_manager_list != []
          - TAGS_DELETE.tags_manager.tags_manager_count == 1

# Create -> assign -> delete

    - name: Create device tags (part of CREATE -> assign -> delete)
      arista.cvp.cv_tag_v3:
        tags: "{{CREATE_TAGS}}"
        mode: create
      register: TAGS_CREATE

    - name: Check create device tags
      assert:
        that:
          - TAGS_CREATE.changed == true
          - TAGS_CREATE.failed == false
          - TAGS_CREATE.success == true
          - TAGS_CREATE.tags_manager.tags_manager_list != []
          - TAGS_CREATE.tags_manager.tags_manager_count == 1

    - name: Assign existing device tags (part of create -> ASSIGN -> delete)
      arista.cvp.cv_tag_v3:
        tags: "{{ASSIGN_UNASSIGN_DELETE_EXISTING_TAGS}}"
        mode: assign
      register: ASSIGN_EXISTING

    - name: Check assign existing device tags
      assert:
        that:
          - ASSIGN_EXISTING.changed == true
          - ASSIGN_EXISTING.failed == false
          - ASSIGN_EXISTING.success == true
          - ASSIGN_EXISTING.tags_manager.tags_manager_list != []
          - ASSIGN_EXISTING.tags_manager.tags_manager_count == 1

    - name: Delete device tags (part of create -> assign -> DELETE)
      arista.cvp.cv_tag_v3:
        tags: "{{ASSIGN_UNASSIGN_DELETE_EXISTING_TAGS}}"
        mode: delete
      register: TAGS_DELETE

    - name: Check delete device tags
      assert:
        that:
          - TAGS_DELETE.changed == true
          - TAGS_DELETE.failed == false
          - TAGS_DELETE.success == true
          - TAGS_DELETE.tags_manager.tags_manager_list != []
          - TAGS_DELETE.tags_manager.tags_manager_count == 1

# Negative Tests
# There is no way to retrieve to tags from CVP.
# Uncomment and fix the test-case once the above feature is added.

# "mode: assign", "auto_create: false" creates a tag in system_tags,
# Known issue in CloudVision version 2022.1.1, fixed in CloudVision version 2023.x.x.

    # - name: Negative Test assign non-existing device
    #   arista.cvp.cv_tag_v3:
    #     tags: "{{ASSIGN_DELETE_NON_EXISTING_TAGS}}"
    #     mode: assign
    #     auto_create: false
    #   register: ASSIGN_NON_EXISTING
    #   ignore_errors: yes

    # - name: Check assign non-existing device tags
    #   assert:
    #     that:
    #       - ASSIGN_NON_EXISTING.changed == false
    #       - ASSIGN_NON_EXISTING.failed == true
    #       - ASSIGN_NON_EXISTING.success == false
    #       - ASSIGN_NON_EXISTING.tags_manager.tags_manager_list == []
    #       - ASSIGN_NON_EXISTING.tags_manager.tags_manager_count == 0

# "mode: delete" of non-existing device tags creates a tag in system_tags,
# Known issue in CloudVision version 2022.1.1, fixed in CloudVision version 2023.x.x.

    # - name: Negative Test delete non-existing device tags
    #   arista.cvp.cv_tag_v3:
    #     tags: "{{ASSIGN_DELETE_NON_EXISTING_TAGS}}"
    #     mode: delete
    #   register: NON_EXISTING_TAGS_DELETE
    #   ignore_errors: yes

    # - name: Check non-existing delete device tags
    #   assert:
    #     that:
    #       - NON_EXISTING_TAGS_DELETE.changed == false
    #       - NON_EXISTING_TAGS_DELETE.failed == true
    #       - NON_EXISTING_TAGS_DELETE.success == false
    #       - NON_EXISTING_TAGS_DELETE.tags_manager.tags_manager_list == []
    #       - NON_EXISTING_TAGS_DELETE.tags_manager.tags_manager_count == 0
